function [Observer, Illuminant, Filters] = prepare_filters(lambda, smoothing, show_plots)
    
    addpath('C:\Users\Daniel\Desktop\PAINTERS_COPILOT\')
    [Observer, Illuminant, ~] = prepare_studio(0);
    
    %% Provide reflectance data
    
%     lambda = (400 : 10 : 700)'; % nm, the standard wavelength domain to be used throughout
    
    Filters.reverse_order = 1;
    Filters.sensor_efficiency = 0.984; % ~, consult sensor_distance_study.m for derivation
    Filters.lambda = 400 : 10 : 700; % nm
    
    Filters.R_input = [
        
%                             % Sensor distance study
%                             0.40530988574028	0.423726141452789
%                             0.578563511371612	0.642346322536469
%                             0.634858131408691	0.728304088115692
%                             0.646071672439575	0.743617653846741
%                             0.658880889415741	0.754154622554779
%                             0.669110596179962	0.762658357620239
%                             0.68103414773941	0.773969650268555
%                             0.696034491062164	0.787797570228577
%                             0.709323406219482	0.801445484161377
%                             0.722323715686798	0.81184184551239
%                             0.731002509593964	0.81798642873764
%                             0.733234286308289	0.819088101387024
%                             0.733091831207275	0.820468246936798
%                             0.731537878513336	0.821075320243835
%                             0.733395755290985	0.823678016662598
%                             0.734741866588593	0.825976550579071
%                             0.739246726036072	0.832971751689911
%                             0.740647792816162	0.836375176906586
%                             0.737272262573242	0.835034251213074
%                             0.739829123020172	0.840333938598633
%                             0.743465602397919	0.846764266490936
%                             0.744231045246124	0.849283397197723
%                             0.741506457328796	0.849547684192658
%                             0.740463733673096	0.853078007698059
%                             0.737282454967499	0.855532884597778
%                             0.735708117485046	0.860846698284149
%                             0.733302235603333	0.865530073642731
%                             0.730328917503357	0.867681384086609
%                             0.727014183998108	0.867444157600403
%                             0.725257754325867	0.867705821990967
%                             0.723463416099548	0.867205142974854
                            
                            % K&M color filter set
                            0.424536049365997   0.019148819148541   0.242808699607849   0.237806290388107   0.274613231420517    -0.035380460321903   -0.030042603611946   0.020391020923853   0.001509759575129    0.007049888372421 
                            0.643800795078278   0.020886993035674   0.277660608291626   0.29491925239563    0.339167863130569    -0.018000606447458   -0.016923800110817   0.019439749419689   -0.016170147806406   -0.009513072669506
                            0.729676604270935   0.025321830064058   0.271065682172775   0.313658267259598   0.379983514547348    -0.016826264560223   -0.019098445773125   0.01354253012687    -0.001947655342519   -0.003773227334023
                            0.744388163089752   0.029428899288178   0.233183473348618   0.327440321445465   0.42049190402031     0.000889671966434    -0.016780029982329   0.014239913783968   0.019611351191998    -0.003916944377124
                            0.754090309143066   0.042739722877741   0.196701720356941   0.334143370389938   0.413888394832611    0.000815354287624    -0.017060402780771   0.002660238184035   0.009039685130119    -0.020205825567246
                            0.762041807174683   0.049005836248398   0.140949442982674   0.337400108575821   0.41109824180603     0.002577784471214    -0.013566168025136   0.002541760914028   0.005041270516813    -0.01792860403657 
                            0.773182332515717   0.05890578776598    0.115959741175175   0.340524643659592   0.433743000030518    0.011349215172231    0.013173861429095    0.005017962306738   0.011400112882257    -0.016026517376304
                            0.787225127220154   0.064642518758774   0.090844765305519   0.339240223169327   0.38280126452446     0.004599078558385    0.059364765882492    0.010004729032517   0.003353601321578    -0.014585919678211
                            0.801427364349365   0.073428936302662   0.067041113972664   0.319825947284698   0.349056631326675    0.026097375899553    0.139897719025612    0.011395815759897   0.009301017969847    -0.009630635380745
                            0.812121510505676   0.081768155097962   0.04937643557787    0.266867369413376   0.253697484731674    0.077480763196945    0.217622980475426    0.008214334957302   0.016230661422014    -0.01516436599195 
                            0.818229675292969   0.082258239388466   0.0315828807652     0.224084109067917   0.181427285075188    0.098714120686054    0.296767622232437    0.001720406115055   -0.000385548919439   -0.012119004502893
                            0.819270491600037   0.077220380306244   0.025494236499071   0.193658739328384   0.161695033311844    0.106745183467865    0.359532117843628    0.010066943243146   0.002052830532193    -0.006250398233533
                            0.820767462253571   0.072606265544891   0.013931544497609   0.145964562892914   0.108572244644165    0.094884425401688    0.41711038351059     0.014941736124456   -0.007455132901669   -0.010415483266115
                            0.821417152881622   0.06974484026432    0.014957752078772   0.113257296383381   0.024185404181481    0.091782547533512    0.46176290512085     0.031679809093475   0.008661911822855    -0.014487937092781
                            0.824007213115692   0.064371734857559   0.026319336146116   0.095031946897507   0.017106000334025    0.057221610099077    0.504472136497498    0.049617119133473   0.017089005559683    -0.008294236846268
                            0.826424300670624   0.062521442770958   0.045154497027397   0.094675377011299   -0.001179661601782   0.023090872913599    0.546943426132202    0.062349826097488   0.035338401794434    -0.011699261143804
                            0.833701848983765   0.059370309114456   0.045071788132191   0.08286888897419    0.021290631964803    0.0360007584095      0.614745557308197    0.085497342050076   0.072859153151512    -0.005784340202808
                            0.837277889251709   0.059978563338518   0.099025636911392   0.06214739382267    -0.015927642583847   0.049981348216534    0.663902461528778    0.102176502346993   0.155351743102074    -0.002578522544354
                            0.835894107818604   0.057279352098703   0.219422906637192   0.060198679566383   -0.023026335984469   0.039483688771725    0.693336129188538    0.106739602982998   0.267375230789185    0.00480499304831  
                            0.841149985790253   0.052065476775169   0.454243928194046   0.092462204396725   0.021936889737845    0.01812781393528     0.72206175327301     0.119389250874519   0.460056006908417    0.007761375047266 
                            0.847180485725403   0.057179734110832   0.635500013828278   0.19847571849823    0.002220429480076    0.029429402202368    0.750861585140228    0.135448560118675   0.643411338329315    0.040577705949545 
                            0.849295556545258   0.066472597420216   0.740254580974579   0.238980829715729   -0.022509537637234   0.042704440653324    0.758083403110504    0.160395056009293   0.760597109794617    0.132751822471619 
                            0.849430322647095   0.071244075894356   0.785753607749939   0.25755786895752    -0.017871744930744   0.058160167187452    0.766910493373871    0.164472356438637   0.793436229228973    0.211968600749969 
                            0.852927803993225   0.071798942983151   0.812940895557404   0.271580785512924   0.005993482656777    0.042088717222214    0.768689513206482    0.160893216729164   0.796752750873566    0.237457782030106 
                            0.855510592460632   0.074612341821194   0.809882342815399   0.300369441509247   0.009515560232103    0.034827798604965    0.766145765781403    0.151724845170975   0.789160430431366    0.247759416699409 
                            0.861220300197601   0.100452110171318   0.81231564283371    0.394533216953278   0.050230495631695    0.040259905159474    0.767405033111572    0.148069232702255   0.771826207637787    0.265224367380142 
                            0.866338193416595   0.140546604990959   0.812627553939819   0.518497228622437   0.122125834226608    0.099387653172016    0.772384643554688    0.143916338682175   0.769411385059357    0.275608271360397 
                            0.868519723415375   0.183774203062058   0.829141795635223   0.653439998626709   0.265370339155197    0.174436837434769    0.77937638759613     0.153916448354721   0.783819437026978    0.298128098249435 
                            0.868447005748749   0.226318508386612   0.83351331949234    0.756628692150116   0.468548834323883    0.277767926454544    0.791190207004547    0.167617186903954   0.802798509597778    0.322422534227371 
                            0.868608236312866   0.260482460260391   0.822996854782105   0.796367764472961   0.606310367584229    0.378221988677979    0.801390707492828    0.177442371845245   0.816322207450867    0.336293578147888 
                            0.867933511734009   0.302406251430511   0.848816215991974   0.820179164409637   0.718453168869019    0.463254570960999    0.80859112739563     0.187540888786316   0.822228670120239    0.361376345157623 
                            
                      ];
    
    %% Prepare data
    
    % Standardize domains
    Rr = zeros(length(lambda), size(Filters.R_input,2)); % R, resampled
    for f = 1 : size(Filters.R_input,2)
        Rr(:,f) = spline(Filters.lambda, Filters.R_input(:,f), lambda);
    end
    Filters.lambda = lambda;
    
    Or = zeros(length(lambda), size(Observer.responses,2));
    for c = 1 : size(Observer.responses,2)
        Or(:,c) = spline(Observer.lambda, Observer.responses(:,c), lambda);
    end
    Observer.responses = Or;
    Observer.lambda = lambda;
    
    Illuminant.power = spline(Illuminant.lambda, Illuminant.power, lambda);
    Illuminant.lambda = lambda;
    
    if smoothing
        % Smooth data
        ind = 1 : 5 : length(Filters.lambda); % 400 : 50 : 700 nm
        R_smoothed = zeros(length(Filters.lambda), size(Rr,2));
        for f = 1 : size(Rr,2)
            D = spline(Filters.lambda(ind), Rr(ind,f), Filters.lambda);
            R_smoothed(:,f) = D;
        end
        Rr = R_smoothed;
    end
    
    % Enforce limits
    Rr(Rr<0) = 0;
    Rr(Rr>1) = 1;
    
    % Separate filter(s) from reflector
    [~, ind_white] = max(sum(Filters.R_input)); % infer which spectrum corresponds to white
    Filters.R = Rr;
    Filters.R(:,ind_white) = [];
    if Filters.reverse_order
        Filters.R = fliplr(Filters.R);
    end
    Filters.R_white = Rr(:, ind_white);
    Filters.qty = size(Filters.R, 2);
    
    %% Derive filter properties
    
    Filters.XYZ = zeros(Filters.qty, 3);
    Filters.RGB = zeros(Filters.qty, 3);
    Filters.T = zeros(size(Filters.R)); % transmission
    Filters.P = zeros(size(Filters.R)); % power
    Filters.brightness = zeros(1, Filters.qty);
    
    for f = 1 : Filters.qty
        
        Filters.XYZ(f,:) = reflectance_to_xyz(Observer, Illuminant, Filters.R(:,f));
        Filters.RGB(f,:) = xyz_to_rgb(Filters.XYZ(f,:), Illuminant);
        Filters.T(:,f) = sqrt(Filters.R(:,f) ./ (Filters.R_white*Filters.sensor_efficiency));
        Filters.P(:,f) = Filters.T(:,f) .* Observer.responses(:,2);
        Filters.brightness(f) = sum(Filters.P(:,f));
        
    end
    
    %% Plot filter properties
    
    if ~show_plots
        return
    end
    
    lw = 3; % line width
    
    figure(1)
        clf
        hold on
        set(gcf,'color','white')

%         plot(Observer.lambda, Observer.responses(:,2), ':', 'Color', zeros(1,3)+0.5, 'LineWidth', lw)
%         [val, ind] = max(Observer.responses(:,2));
%         text(Observer.lambda(ind), val, 'y\_bar', 'HorizontalAlignment','center','VerticalAlignment','top')
        plot(Filters.lambda, Filters.R_white, 'Color', zeros(1,3)+0.5, 'LineWidth', lw)
        text(Filters.lambda(end), Filters.R_white(end), ' White')
        for f = 1 : Filters.qty
            plot(Filters.lambda, Filters.R(:,f), 'LineWidth', lw, 'Color', Filters.RGB(f,:))
            text(Filters.lambda(end), Filters.R(end,f), [' #' num2str(f)])
        end

        axis([min(Filters.lambda) max(Filters.lambda) 0 1])
        grid on
        grid minor
        xlabel('Wavelength, nm')
        ylabel('Reflectance, White Reflector Through Filter, ~')
        title('Filter Reflectance Spectra')
    
    figure(2)
        clf
        hold on
        set(gcf,'color','white')

%         plot(Observer.lambda, Observer.responses(:,2), ':', 'Color', zeros(1,3)+0.5, 'LineWidth', lw)
%         [val, ind] = max(Observer.responses(:,2));
%         text(Observer.lambda(ind), val, 'y\_bar', 'HorizontalAlignment','center','VerticalAlignment','top')
        for f = 1 : Filters.qty
            plot(Filters.lambda, Filters.T(:,f), 'LineWidth', lw, 'Color', Filters.RGB(f,:))
            text(Filters.lambda(end), Filters.T(end,f), [' #' num2str(f)])
        end

        axis([min(Filters.lambda) max(Filters.lambda) 0 1])
        grid on
        grid minor
        xlabel('Wavelength, nm')
        ylabel('Transmission, ~')
        title('Filter Transmission Spectra')
        
%     figure(3)
%         clf
%         hold on
%         set(gcf,'color','white')
%         
%         rect.x = 0.45 .* [1 1 -1 -1];
%         rect.y = [1 0 0 1];
%         for f = 1 : Filters.qty
%             fill(rect.x + f, rect.y .* Filters.brightness(f), Filters.RGB(f,:), 'EdgeColor', 'none')
%             text(f, Filters.brightness(f), [num2str(round(Filters.brightness(f)*100)/100)],'HorizontalAlignment','center','VerticalAlignment','bottom')
%         end
%         
%         grid on
%         grid minor
%         xlabel('Filter Index, Arbitrary Order')
%         ylabel('Brightness, Dot Product of y\_bar and Transmission, ~')
%         title('Filter Overall Brightnesses')
        
    figure(4)
        clf
        hold on
        set(gcf,'color','white')
        pos = get(gcf,'position');
        set(gcf,'position',[pos(1:2) 800 200])
        set(gca,'position',[0.05 0.05 0.90 0.90])
        r = 1;
        th = linspace(0, 2*pi, 360);
        x = cos(th) .* r;
        y = sin(th) .* r;
        
        for f = 1 : Filters.qty
            fill(x+f*(r*1.2*2), y, Filters.RGB(f,:), 'EdgeColor','k','LineWidth', 3)
            text(mean(x+f*(r*1.2*2)), max(y)+0.1*r, ['#' num2str(f)], 'HorizontalAlignment','center','VerticalAlignment','bottom','FontSize',10)
        end
        axis equal
        axis tight
        axis off

end



















































